---
- name: Install containerd and NVIDIA Container Toolkit
  hosts: nodes
  become: yes
  gather_facts: yes
  
  vars:
    containerd_version: "1.7.7"
    runc_version: "1.1.9"
    cni_version: "1.3.0"
    nerdctl_version: "1.6.2"
    
  tasks:
    - name: Update package cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
        
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - wget
          - tar
        state: present
        
    - name: Check if containerd is already installed
      ansible.builtin.command: containerd --version
      register: containerd_check
      failed_when: false
      changed_when: false
      
    - name: Install containerd via Docker repository (if not already installed)
      block:
        - name: Add Docker GPG key
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
            
        - name: Add Docker repository
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
            
        - name: Install containerd.io
          ansible.builtin.apt:
            name: containerd.io
            state: present
            update_cache: yes
      when: containerd_check.rc != 0
      
    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'
        
    - name: Generate default containerd config
      ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml
        
    - name: Enable systemd cgroup driver in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup\s*=\s*false'
        line: '            SystemdCgroup = true'
        backup: yes
        
    - name: Start and enable containerd service
      ansible.builtin.systemd:
        name: containerd
        state: started
        enabled: yes
        daemon_reload: yes
        
    - name: Install NVIDIA Container Toolkit GPG key
      ansible.builtin.shell: |
        curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | \
        gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
      args:
        creates: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
        
    - name: Add NVIDIA Container Toolkit repository
      ansible.builtin.shell: |
        curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
        sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
        tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
      args:
        creates: /etc/apt/sources.list.d/nvidia-container-toolkit.list
        
    - name: Update package cache after adding NVIDIA repo
      ansible.builtin.apt:
        update_cache: yes
        
    - name: Install NVIDIA Container Toolkit
      ansible.builtin.apt:
        name: nvidia-container-toolkit
        state: present
        
    - name: Configure containerd to use NVIDIA runtime
      ansible.builtin.shell: nvidia-ctk runtime configure --runtime=containerd
      notify: restart containerd
      
    - name: Create CNI bin directory
      ansible.builtin.file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'
        
    - name: Install CNI plugins
      ansible.builtin.unarchive:
        src: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-amd64-v{{ cni_version }}.tgz"
        dest: /opt/cni/bin
        remote_src: yes
        creates: /opt/cni/bin/bridge
        
    - name: Install nerdctl (Docker-compatible CLI for containerd)
      ansible.builtin.unarchive:
        src: "https://github.com/containerd/nerdctl/releases/download/v{{ nerdctl_version }}/nerdctl-{{ nerdctl_version }}-linux-amd64.tar.gz"
        dest: /usr/local/bin
        remote_src: yes
        mode: '0755'
        creates: /usr/local/bin/nerdctl
        
    - name: Create nerdctl symlink for easier access
      ansible.builtin.file:
        src: /usr/local/bin/nerdctl
        dest: /usr/bin/nerdctl
        state: link
        
    - name: Add current user to necessary groups
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: "{{ item }}"
        append: yes
      loop:
        - systemd-journal
      when: ansible_connection != 'local'
      
    - name: Test containerd installation
      ansible.builtin.command: containerd --version
      register: containerd_version_output
      changed_when: false
      
    - name: Display containerd version
      ansible.builtin.debug:
        msg: "{{ containerd_version_output.stdout }}"
        
    - name: Test nerdctl installation
      ansible.builtin.command: nerdctl version
      register: nerdctl_version_output
      changed_when: false
      when: ansible_connection != 'local'
      
    - name: Test nerdctl installation (local)
      ansible.builtin.command: nerdctl version
      register: nerdctl_version_output_local
      changed_when: false
      when: ansible_connection == 'local'
      
    - name: Display nerdctl version
      ansible.builtin.debug:
        msg: "{{ nerdctl_version_output.stdout if ansible_connection != 'local' else nerdctl_version_output_local.stdout }}"
        
    - name: Test NVIDIA Container Toolkit
      ansible.builtin.command: nvidia-ctk --version
      register: nvidia_ctk_version
      changed_when: false
      
    - name: Display NVIDIA Container Toolkit version
      ansible.builtin.debug:
        msg: "{{ nvidia_ctk_version.stdout }}"
        
    - name: Pull hello-world container for testing
      ansible.builtin.command: nerdctl pull hello-world
      register: hello_world_pull
      when: ansible_connection != 'local'
      
    - name: Pull hello-world container for testing (local)
      ansible.builtin.command: nerdctl pull hello-world
      register: hello_world_pull_local
      when: ansible_connection == 'local'
      
    - name: Test basic container functionality
      ansible.builtin.command: nerdctl run --rm hello-world
      register: hello_world_test
      when: ansible_connection != 'local'
      
    - name: Test basic container functionality (local)
      ansible.builtin.command: nerdctl run --rm hello-world
      register: hello_world_test_local
      when: ansible_connection == 'local'
      
    - name: Display container test result
      ansible.builtin.debug:
        msg: "Container test successful"
      when: (ansible_connection != 'local' and hello_world_test.rc == 0) or (ansible_connection == 'local' and hello_world_test_local.rc == 0)
      
    - name: Test NVIDIA container integration
      ansible.builtin.command: nerdctl run --gpus all --rm nvidia/cuda:12.0-base-ubuntu20.04 nvidia-smi
      register: nvidia_container_test
      ignore_errors: yes
      when: ansible_connection != 'local'
      
    - name: Test NVIDIA container integration (local)
      ansible.builtin.command: nerdctl run --gpus all --rm nvidia/cuda:12.0-base-ubuntu20.04 nvidia-smi
      register: nvidia_container_test_local
      ignore_errors: yes
      when: ansible_connection == 'local'
      
    - name: Display NVIDIA container test result
      ansible.builtin.debug:
        msg: "NVIDIA container integration working"
      when: (ansible_connection != 'local' and nvidia_container_test.rc == 0) or (ansible_connection == 'local' and nvidia_container_test_local.rc == 0)
      
  handlers:
    - name: restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted